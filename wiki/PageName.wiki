#summary Bullet gun definitions

= Bullet Guns =

Bullet guns are declared as
{{{
bullet <gun_name>
{
    <affectors>
    <state_list>
}
}}}

== Affectors ==

Affectors are functions which control bullet behaviour after being emitted.  BulletScript's main purpose is to control emission patterns, but often these need to be in harmony with the emitted bullet's behaviour, so the ability to control this is provided.  Affectors are native C++ functions, for reasons of speed.  The user does not need to specify any affectors if they do not want to use them, and can update bullets themselves if they wish.  C++ affector functions take the form:

{{{
void func_name(BulletType &b, float*, float)
}}}

where the first argument is the bullet to be modified (_BulletType_ is the user-defined bullet structure), the second is the list of arguments, and the third is the time for this frame, in seconds.  It is up to the user to know how many arguments are being passed in.  An example affector might look like his:

{{{
void Force_Affector(Bullet& b, float* args, float frameTime)
{
    b.vx += args[0] * frameTime;
    b.vy += args[1] * frameTime;
}
}}}

The affector is then registered with

{{{
BulletMachine<BulletType>::registerAffectorFunction("Force", Force_Affector);
}}}

and then used in script as follows:

{{{
affectors Force(Player_x, 12);
}}}

which means call the affector bound to _FuncName_ and pass in Player_x and 12 and variables.  When more than one affector is used, they are comma-separated:

{{{
affectors Force(10, -100), Accel(0, 10);
}}}

Affectors can take either constants, functions, or global variables as arguments.  Local state variables are not within scope.